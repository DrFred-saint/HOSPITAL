<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GTA7 Prototype</title>
    <style>
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <script>
        // Get canvas and context
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Player object
        const player = {
            x: 400,
            y: 300,
            width: 20,
            height: 20,
            speed: 5,
            color: 'blue'
        };

        // NPC object (e.g., pedestrian)
        const npc = {
            x: 200,
            y: 200,
            width: 20,
            height: 20,
            speed: 2,
            color: 'red',
            direction: Math.random() * 2 * Math.PI // Random initial direction
        };

        // Walls for collision (simple rectangles)
        const walls = [
            { x: 100, y: 100, width: 200, height: 20 }, // Horizontal wall
            { x: 300, y: 100, width: 20, height: 200 }  // Vertical wall
        ];

        // Collectible item
        const item = {
            x: 500,
            y: 400,
            width: 10,
            height: 10,
            color: 'yellow',
            collected: false
        };

        // Keyboard input state
        const keys = {
            ArrowUp: false,
            ArrowDown: false,
            ArrowLeft: false,
            ArrowRight: false,
            Space: false
        };

        // Handle keydown events
        document.addEventListener('keydown', (e) => {
            if (e.code in keys) {
                keys[e.code] = true;
            }
        });

        // Handle keyup events
        document.addEventListener('keyup', (e) => {
            if (e.code in keys) {
                keys[e.code] = false;
            }
        });

        // Collision detection between two rectangles
        function isColliding(rect1, rect2) {
            return rect1.x < rect2.x + rect2.width &&
                   rect1.x + rect1.width > rect2.x &&
                   rect1.y < rect2.y + rect2.height &&
                   rect1.y + rect1.height > rect2.y;
        }

        // Update player position with collision detection
        function updatePlayer() {
            let newX = player.x;
            let newY = player.y;

            if (keys.ArrowUp) newY -= player.speed;
            if (keys.ArrowDown) newY += player.speed;
            if (keys.ArrowLeft) newX -= player.speed;
            if (keys.ArrowRight) newX += player.speed;

            // Check collision with walls
            let canMove = true;
            const playerTest = { ...player, x: newX, y: newY };
            for (let wall of walls) {
                if (isColliding(playerTest, wall)) {
                    canMove = false;
                    break;
                }
            }

            // Update position if no collision
            if (canMove) {
                player.x = newX;
                player.y = newY;
            }

            // Keep player in bounds
            player.x = Math.max(0, Math.min(canvas.width - player.width, player.x));
            player.y = Math.max(0, Math.min(canvas.height - player.height, player.y));

            // Check for item collection
            if (!item.collected && isColliding(player, item)) {
                item.collected = true;
                console.log('Item collected!');
            }

            // Check for attack (spacebar)
            if (keys.Space) {
                if (isColliding(player, npc)) {
                    console.log('NPC hit!');
                    npc.x = Math.random() * (canvas.width - npc.width); // Respawn NPC
                    npc.y = Math.random() * (canvas.height - npc.height);
                }
            }
        }

        // Update NPC (simple random movement)
        function updateNPC() {
            npc.x += npc.speed * Math.cos(npc.direction);
            npc.y += npc.speed * Math.sin(npc.direction);

            // Bounce off canvas edges
            if (npc.x <= 0 || npc.x >= canvas.width - npc.width) {
                npc.direction = Math.PI - npc.direction;
            }
            if (npc.y <= 0 || npc.y >= canvas.height - npc.height) {
                npc.direction = -npc.direction;
            }

            // Occasionally change direction
            if (Math.random() < 0.01) {
                npc.direction = Math.random() * 2 * Math.PI;
            }

            // Check collision with walls
            for (let wall of walls) {
                if (isColliding(npc, wall)) {
                    npc.direction = Math.random() * 2 * Math.PI; // Random new direction
                    break;
                }
            }
        }

        // Draw everything
        function draw() {
            // Clear canvas
            ctx.fillStyle = 'lightgray';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw walls
            ctx.fillStyle = 'black';
            for (let wall of walls) {
                ctx.fillRect(wall.x, wall.y, wall.width, wall.height);
            }

            // Draw player
            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);

            // Draw NPC
            ctx.fillStyle = npc.color;
            ctx.fillRect(npc.x, npc.y, npc.width, npc.height);

            // Draw item if not collected
            if (!item.collected) {
                ctx.fillStyle = item.color;
                ctx.fillRect(item.x, item.y, item.width, item.height);
            }
        }

        // Game loop
        function gameLoop() {
            updatePlayer();
            updateNPC();
            draw();
            requestAnimationFrame(gameLoop);
        }

        // Start the game
        gameLoop();
    </script>
</body>
</html>
